use halo2_proofs::{
    arithmetic::FieldExt,
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner},
    plonk::{
        Advice, Circuit, Column, ConstraintSystem, Error, Expression, Fixed, Instance, Selector,
        TableColumn,
    },
    poly::Rotation,
};
use pasta_curves::{
    group::ff::{PrimeField, PrimeFieldBits},
    Fp,
};
use std::marker::PhantomData;

pub trait NumericInstructions<F: FieldExt>: Chip<F> {
    /// Variable representing a number.
    type Word;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Option<F>) -> Result<Self::Word, Error>;

    fn add(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Word,
        b: Self::Word,
    ) -> Result<Self::Word, Error>;

    fn verify_decompose(
        &self,
        layouter: impl Layouter<F>,
        e: F,
        o: F,
        c: Self::Word,
    ) -> Result<(Self::Word, Self::Word), Error>;

    /// Exposes a number as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        num: Self::Word,
        row: usize,
    ) -> Result<(), Error>;
}

/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
pub struct AndChip<F: FieldExt> {
    config: AndConfig,
    _marker: PhantomData<F>,
}

/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
pub struct AndConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 2],

    /// This is the public input (instance) column.
    instance: Column<Instance>,

    even_bits: TableColumn,

    // We need a selector to enable the add gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::add` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_add: Selector,
    s_decompose: Selector,
}

impl<F: FieldExt> AndChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        instance: Column<Instance>,
        constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_equality(instance);
        meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_add = meta.selector();
        let s_decompose = meta.selector();
        let even_bits = meta.lookup_table_column();

        meta.create_gate("add", |meta| {
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_add = meta.query_selector(s_add);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            vec![s_add * (lhs + rhs - out)]
        });

        meta.create_gate("decompose", |meta| {
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_decompose = meta.query_selector(s_decompose);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            vec![s_decompose * (lhs + Expression::Constant(F::from(2)) * rhs - out)]
        });

        AndConfig {
            advice,
            instance,
            even_bits,
            s_add,
            s_decompose,
        }
    }
}

impl<F: FieldExt> Chip<F> for AndChip<F> {
    type Config = AndConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}

/// A variable representing a number.
#[derive(Clone)]
pub struct Word<F: FieldExt>(AssignedCell<F, F>);

impl<F: FieldExt> NumericInstructions<F> for AndChip<F> {
    type Word = Word<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Option<F>,
    ) -> Result<Self::Word, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(
                        || "private input",
                        config.advice[0],
                        0,
                        || value.ok_or(Error::Synthesis),
                    )
                    .map(Word)
            },
        )
    }

    fn add(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Word,
        b: Self::Word,
    ) -> Result<Self::Word, Error> {
        let config = self.config();

        layouter.assign_region(
            || "add",
            |mut region: Region<'_, F>| {
                // We only want to use a single addition gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_add.enable(&mut region, 0)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;

                // Now we can assign the addition result, which is to be assigned
                // into the output position.
                let value = a.0.value().and_then(|a| b.0.value().map(|b| *a + *b));

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(
                        || "lhs + rhs",
                        config.advice[0],
                        1,
                        || value.ok_or(Error::Synthesis),
                    )
                    .map(Word)
            },
        )
    }

    fn verify_decompose(
        &self,
        mut layouter: impl Layouter<F>,
        e: F,
        o: F,
        c: Self::Word,
    ) -> Result<(Self::Word, Self::Word), Error> {
        let config = self.config();

        layouter.assign_region(
            || "decompose",
            |mut region: Region<'_, F>| {
                // We only want to use a single addition gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_decompose.enable(&mut region, 0)?;

                let e_cell = region
                    .assign_advice(|| "even bits", config.advice[0], 0, || Ok(e))
                    .map(Word)?;

                let o_cell = region
                    .assign_advice(|| "odd bits", config.advice[1], 0, || Ok(o))
                    .map(Word)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                c.0.copy_advice(|| "out", &mut region, config.advice[0], 1)?;
                Ok((e_cell, o_cell))
            },
        )
    }
    // fn verify_decompose(
    //     &self,
    //     mut layouter: impl Layouter<F>,
    //     a: Self::Word,
    //     b: Self::Word,
    //     c: Self::Word,
    // ) -> Result<(), Error> {
    //     let config = self.config();

    //     layouter.assign_region(
    //         || "decompose",
    //         |mut region: Region<'_, F>| {
    //             // We only want to use a single addition gate in this region,
    //             // so we enable it at region offset 0; this means it will constrain
    //             // cells at offsets 0 and 1.
    //             config.s_decompose.enable(&mut region, 0)?;

    //             // The inputs we've been given could be located anywhere in the circuit,
    //             // but we can only rely on relative offsets inside this region. So we
    //             // assign new cells inside the region and constrain them to have the
    //             // same values as the inputs.
    //             a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
    //             b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;
    //             c.0.copy_advice(|| "out", &mut region, config.advice[0], 1)?;
    //             Ok(())
    //         },
    //     )
    // }

    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        num: Self::Word,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();

        layouter.constrain_instance(num.0.cell(), config.instance, row)
    }
}

/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
pub struct MyCircuit<F: FieldExt> {
    pub a: Option<F>,
    pub b: Option<F>,
}

impl<F: FieldExt> Circuit<F> for MyCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = AndConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        // Create a fixed column to load constants.
        let constant = meta.fixed_column();

        AndChip::configure(meta, advice, instance, constant)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = AndChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let b = field_chip.load_private(layouter.namespace(|| "load b"), self.b)?;
        let ae = todo!();
        let ao = todo!();
        field_chip.verify_decompose(layouter.namespace(|| "a decomposition"), ae, ao, a)?;
        let be = todo!();
        let bo = todo!();
        field_chip.verify_decompose(layouter.namespace(|| "b decomposition"), be, bo, b)?;
        //...

        // Expose the result as a public input to the circuit.
        // field_chip.expose_public(layouter.namespace(|| "expose c"), c, 0)
    }
}

fn decompose(word: Fp) -> (Fp, Fp) {
    let mut even_only = word.to_repr();
    even_only.iter_mut().for_each(|bits| {
        *bits &= 0b10101010;
    });

    let mut odd_only = word.to_repr();
    odd_only.iter_mut().for_each(|bits| {
        // im too tired!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        *bits &= 0b01010101;
    });

    let even_only = Fp::from_repr(even_only).unwrap();
    let odd_only = Fp::from_repr(odd_only).unwrap();

    // if cfg!(debug_assertions) {
    let even_only_debug = word;
    even_only_debug
        .to_le_bits()
        .iter_mut()
        .enumerate()
        .for_each(|(i, b)| {
            if i % 2 != 0 {
                b.set(false)
            }
        });
    let odd_only_debug = word;
    odd_only_debug
        .to_le_bits()
        .iter_mut()
        .enumerate()
        .for_each(|(i, b)| {
            if i % 2 == 0 {
                b.set(false)
            }
        });
    assert_eq!(odd_only_debug, odd_only);
    assert_eq!(even_only_debug, even_only);
    // }

    (even_only, odd_only)
}
